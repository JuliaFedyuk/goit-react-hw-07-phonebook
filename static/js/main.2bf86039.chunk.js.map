{"version":3,"sources":["Components/Container/Container.js","redux/contacts/contacts-actions.js","redux/contacts/contacts-operations.js","redux/contacts/contacts-selectors.js","redux/contacts/contacts-reducer.js","Components/ContactForm/ContactForm.js","Components/ContactList/ContactList.js","Components/Filter/Filter.js","App.js","redux/store.js","index.js"],"names":["Container","children","className","fetchContactRequest","createAction","fetchContactSuccess","fetchContactError","addContactRequest","addContactSuccess","addContactError","deleteContactRequest","deleteContactSuccess","deleteContactError","changeFilter","axios","defaults","baseURL","dispatch","get","then","data","catch","error","message","name","number","contact","console","log","post","id","delete","getItems","state","contacts","items","getFilter","filter","getLoading","loading","getfilterContacts","createSelector","allContacts","filterNormalize","toLowerCase","includes","createReducer","payload","_","combineReducers","ContactForm","handleSubmit","e","preventDefault","props","map","alert","onSubmit","reset","handleChange","currentTarget","value","setState","this","type","pattern","title","required","onChange","Component","connect","contactsSelectors","contactsOperations","ContactList","fetchContacts","isLoadingContacts","onClick","onDeleteContact","event","target","App","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","store","next","action","logger","configureStore","reducer","contactsReducer","devTools","process","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2bf86039.chunk.js","sourcesContent":["import React from 'react';\nimport './Container.scss';\n\nconst Container = ({ children }) => <div className=\"Container\">{children}</div>;\n\nexport default Container;\n","import { createAction } from '@reduxjs/toolkit';\n\nexport const fetchContactRequest = createAction('contacts/fetchContactRequest');\nexport const fetchContactSuccess = createAction('contacts/fetchContactSuccess');\nexport const fetchContactError = createAction('contacts/fetchContactError');\n\nexport const addContactRequest = createAction('contacts/addContactRequest');\nexport const addContactSuccess = createAction('contacts/addContactSuccess');\nexport const addContactError = createAction('contacts/addContactError');\n\nexport const deleteContactRequest = createAction(\n  'contacts/deleteContactRequest',\n);\nexport const deleteContactSuccess = createAction(\n  'contacts/deleteContactSuccess',\n);\nexport const deleteContactError = createAction('contacts/deleteContactError');\n\nexport const changeFilter = createAction('contacts/changeFilter');\n","import axios from 'axios';\nimport {\n  fetchContactRequest,\n  fetchContactSuccess,\n  fetchContactError,\n  addContactRequest,\n  addContactSuccess,\n  addContactError,\n  deleteContactRequest,\n  deleteContactSuccess,\n  deleteContactError,\n} from './contacts-actions';\n\naxios.defaults.baseURL = 'http://localhost:3001';\n\nconst fetchContacts = () => dispatch => {\n  dispatch(fetchContactRequest());\n\n  axios\n    .get('/contacts')\n    .then(({ data }) => dispatch(fetchContactSuccess(data)))\n    .catch(error => dispatch(fetchContactError(error.message)));\n};\n\nconst addContact = ({ name, number }) => dispatch => {\n  const contact = {\n    name,\n    number,\n  };\n  console.log(contact);\n  dispatch(addContactRequest());\n\n  axios\n    .post('/contacts', contact)\n    .then(({ data }) => dispatch(addContactSuccess(data)))\n    .catch(error => dispatch(addContactError(error.message)));\n};\n\nconst deleteContact = id => dispatch => {\n  dispatch(deleteContactRequest());\n  axios\n    .delete(`/contacts/${id}`)\n    .then(() => dispatch(deleteContactSuccess(id)))\n    .catch(error => dispatch(deleteContactError(error.message)));\n};\n\nexport default {\n  fetchContacts,\n  addContact,\n  deleteContact,\n};\n","import { createSelector } from 'reselect';\n\nconst getLoading = state => state.contacts.loading;\nconst getItems = state => state.contacts.items;\nconst getFilter = state => state.contacts.filter;\n\nconst getfilterContacts = createSelector(\n  [getItems, getFilter],\n  (allContacts, filter) => {\n    const filterNormalize = filter.toLowerCase();\n    return allContacts.filter(contact =>\n      contact.name.toLowerCase().includes(filterNormalize),\n    );\n  },\n);\n\nexport default {\n  getLoading,\n  getItems,\n  getFilter,\n  getfilterContacts,\n};\n","import { combineReducers } from 'redux';\nimport { createReducer } from '@reduxjs/toolkit';\nimport {\n  addContactRequest,\n  addContactSuccess,\n  addContactError,\n  deleteContactRequest,\n  deleteContactSuccess,\n  deleteContactError,\n  changeFilter,\n  fetchContactRequest,\n  fetchContactSuccess,\n  fetchContactError,\n} from './contacts-actions';\n\nconst items = createReducer([], {\n  [fetchContactSuccess]: (state, { payload }) => payload,\n  [addContactSuccess]: (state, { payload }) => [...state, payload],\n  [deleteContactSuccess]: (state, { payload }) =>\n    state.filter(({ id }) => id !== payload),\n});\n\nconst filter = createReducer('', {\n  [changeFilter]: (_, { payload }) => payload,\n});\n\nconst loading = createReducer(false, {\n  [addContactRequest]: () => true,\n  [addContactSuccess]: () => false,\n  [addContactError]: () => false,\n\n  [deleteContactRequest]: () => true,\n  [deleteContactSuccess]: () => false,\n  [deleteContactError]: () => false,\n\n  [fetchContactRequest]: () => true,\n  [fetchContactSuccess]: () => false,\n  [fetchContactError]: () => false,\n});\n\nconst error = createReducer(null, {});\n\nexport default combineReducers({\n  items,\n  filter,\n  loading,\n  error,\n});\n","import { Component } from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { contactsOperations, contactsSelectors } from '../../redux/contacts';\nimport './ContactForm.scss';\n\nclass ContactForm extends Component {\n  state = {\n    name: '',\n    number: '',\n  };\n\n  handleSubmit = e => {\n    const { name } = this.state;\n    e.preventDefault();\n\n    const getName = this.props.contacts.map(contact =>\n      contact.name.toLowerCase(),\n    );\n\n    if (getName.includes(name.toLowerCase())) {\n      alert(`${name} is already in contacts`);\n    } else {\n      this.props.onSubmit(this.state);\n    }\n\n    this.reset();\n  };\n\n  handleChange = e => {\n    const { name, value } = e.currentTarget;\n    this.setState({ [name]: value });\n  };\n\n  reset = () => {\n    this.setState({\n      name: '',\n      number: '',\n    });\n  };\n\n  render() {\n    return (\n      <form className=\"form\" onSubmit={this.handleSubmit}>\n        <label className=\"input_label\">\n          Name\n          <input\n            className=\"form_input\"\n            type=\"text\"\n            name=\"name\"\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n            title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n            required\n            value={this.state.name}\n            onChange={this.handleChange}\n          />\n        </label>\n        <label className=\"input_label\">\n          Number\n          <input\n            className=\"form_input\"\n            type=\"tel\"\n            name=\"number\"\n            pattern=\"(\\+?( |-|\\.)?\\d{1,2}( |-|\\.)?)?(\\(?\\d{3}\\)?|\\d{3})( |-|\\.)?(\\d{3}( |-|\\.)?\\d{4})\"\n            title=\"Номер телефона должен состоять из 11-12 цифр и может содержать цифры, пробелы, тире, пузатые скобки и может начинаться с +\"\n            required\n            value={this.state.number}\n            onChange={this.handleChange}\n          />\n        </label>\n        <button className=\"submit_button\" type=\"submit\">\n          Add contact\n        </button>\n      </form>\n    );\n  }\n}\n\nContactForm.propTypes = {\n  name: PropTypes.string,\n  number: PropTypes.number,\n};\n\nconst mapStateToProps = state => ({\n  contacts: contactsSelectors.getItems(state),\n});\n\nconst mapDispatchToProps = dispatch => ({\n  onSubmit: (name, number) =>\n    dispatch(contactsOperations.addContact(name, number)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactForm);\n","import { connect } from 'react-redux';\nimport { contactsOperations, contactsSelectors } from '../../redux/contacts';\nimport { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport './ContactList.scss';\n\nclass ContactList extends Component {\n  componentDidMount() {\n    this.props.fetchContacts();\n  }\n\n  render() {\n    const contacts = this.props.contacts;\n    console.log(this.props);\n\n    return (\n      <>\n        {this.props.isLoadingContacts && <h1>Loading...</h1>}\n        <ul className=\"contact_list\">\n          {contacts.map(({ id, name, number }) => (\n            <li className=\"contact_item\" key={id}>\n              <p className=\"contact_info\">\n                {name}: {number}\n              </p>\n              <button\n                className=\"add_button\"\n                type=\"button\"\n                onClick={() => this.props.onDeleteContact(id)}\n              >\n                Delete\n              </button>\n            </li>\n          ))}\n        </ul>\n      </>\n    );\n  }\n}\n\nContactList.propTypes = {\n  contacts: PropTypes.array.isRequired,\n  id: PropTypes.string,\n  name: PropTypes.string,\n  number: PropTypes.number,\n  onDeleteContact: PropTypes.func.isRequired,\n};\n\nconst mapStateToProps = state => ({\n  isLoadingContacts: contactsSelectors.getLoading(state),\n  contacts: contactsSelectors.getfilterContacts(state),\n});\n\nconst mapDispatchToProps = dispatch => ({\n  fetchContacts: () => dispatch(contactsOperations.fetchContacts()),\n  onDeleteContact: id => dispatch(contactsOperations.deleteContact(id)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactList);\n","import { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { contactsSelectors, changeFilter } from '../../redux/contacts';\n\nimport './Filter.scss';\n\nconst Filter = ({ value, onChange }) => (\n  <label className=\"filter_label\">\n    Find contacts by name\n    <input\n      className=\"filter_input\"\n      type=\"text\"\n      value={value}\n      onChange={onChange}\n    ></input>\n  </label>\n);\n\nFilter.propTypes = {\n  value: PropTypes.string.isRequired,\n  onChange: PropTypes.func.isRequired,\n};\n\nconst mapStateToProps = state => ({\n  value: contactsSelectors.getFilter(state),\n});\n\nconst mapToDispatchProps = dispatch => ({\n  onChange: event => dispatch(changeFilter(event.target.value)),\n});\n\nexport default connect(mapStateToProps, mapToDispatchProps)(Filter);\n","import Container from './Components/Container/Container';\nimport ContactForm from './Components/ContactForm/ContactForm';\nimport ContactList from './Components/ContactList/ContactList';\nimport Filter from './Components/Filter/Filter';\nimport './App.scss';\n\nconst App = () => (\n  <Container>\n    <h1 className=\"main_title\">Phonebook</h1>\n    <ContactForm />\n    <h2 className=\"contacts_title\">Contacts</h2>\n    <Filter />\n    <ContactList />\n  </Container>\n);\n\nexport default App;\n","import { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit';\nimport logger from 'redux-logger';\nimport {\n  FLUSH,\n  REHYDRATE,\n  PAUSE,\n  PERSIST,\n  PURGE,\n  REGISTER,\n} from 'redux-persist';\nimport { contactsReducer } from './contacts';\n\nconst myMiddleware = store => next => action => {\n  console.log('my middleware', action);\n\n  next(action);\n};\n\nconst middleware = [\n  ...getDefaultMiddleware({\n    serializableCheck: {\n      ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\n    },\n  }),\n  myMiddleware,\n  logger,\n];\n\nconst store = configureStore({\n  reducer: {\n    contacts: contactsReducer,\n  },\n  middleware,\n  devTools: process.env.NODE_ENV === 'development',\n});\n\nexport default store;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport App from './App';\nimport store from './redux/store';\nimport './styles/base.scss';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}